#include <iostream>#include "SDL2/SDL_events.h"#include "SDL2/SDL_render.h"#include <SDL2/SDL.h>#include <SDL_image.h>#include "Button.h"#include "clients.h"using namespace std;#define SCREEN_WIDTH 800#define SCREEN_HEIGHT 600SDL_Texture * getCardTexture(SDL_Renderer *, string);int main() {    if(SDL_Init(SDL_INIT_VIDEO) < 0) {        cout << "ERROR: " << SDL_GetError() << "\n";        return 1;    }    SDL_LogSetAllPriority(SDL_LOG_PRIORITY_VERBOSE);    // initialise window    SDL_Window * window = SDL_CreateWindow("Blackjack", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);    if(window == nullptr) {        cout << "ERROR: can't create window: " << SDL_GetError() << "\n";        return 1;    }    // initialise renderer    SDL_Renderer * renderer = SDL_CreateRenderer(window, -1, 0);    if(renderer == nullptr) {        cout << "ERROR: can't create renderer: " << SDL_GetError() << "\n";        return 1;    }    //SDL_Texture * cardTex = getCardTexture(renderer, (*card).getImgPath());    //SDL_Rect rect = {200, 200, 200, 200};    Button hitButton = Button(renderer);    hitButton.srect.y = 0;    hitButton.drect.x = 550;    hitButton.drect.y = 300;    Dealer dealer(renderer, SCREEN_HEIGHT, SCREEN_WIDTH);    Player player(renderer, SCREEN_HEIGHT, SCREEN_WIDTH);    Card * tempCard;    int running = 1;    while(running) {        SDL_Event event;        while(SDL_PollEvent(&event)) {            switch(event.type) {                case SDL_QUIT:                    running = 0;                    break;                case SDL_MOUSEBUTTONUP:                    if(event.button.button == SDL_BUTTON_LEFT) {                        if(hitButton.isSelected) {                            tempCard = dealer.dealPlayer();                            player.takeCard(tempCard);                            dealer.dealHand();                            //card = deck.deal();                            //cardTex = getCardTexture(renderer, (*card).getImgPath());                        }                    }            }        }        hitButton.update();        // do stuff        //        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);        SDL_RenderClear(renderer);        dealer.draw();        player.draw();        hitButton.draw();        // used to draw card texture        //SDL_RenderCopy(renderer, cardTex, NULL, &rect);        SDL_RenderPresent(renderer);    }}void clearTable(SDL_Renderer * renderer) {    SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);    SDL_RenderClear(renderer);}void updateDealerHand() {}void updatePlayerHand() {}SDL_Texture * getCardTexture(SDL_Renderer * renderer, string path) {    SDL_Texture * temp = IMG_LoadTexture(renderer, path.data());    if(!temp) {        cout << "ERROR: can't load card texture: " << SDL_GetError() << "\n";        return temp;    }else {        return temp;    }}